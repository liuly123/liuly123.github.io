<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Tensorflow笔记</title>
      <link href="/2020/03/06/Tensorflow%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/06/Tensorflow%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/tensorflow/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/tensorflow/</a></p><p>需要先安装pip： <code>sudo apt install python-pip</code></p><p>选择<code>Linux</code>，<code>cp27</code>，<code>1.3.0</code>，复制代码安装</p><pre><code class="sh">pip install \  -i https://pypi.tuna.tsinghua.edu.cn/simple/ \  https://mirrors.tuna.tsinghua.edu.cn/tensorflow/linux/cpu/tensorflow-1.3.0-cp27-none-linux_x86_64.whl</code></pre><p>测试</p><pre><code class="python">pythonimport tensorflow as tftf.__version__</code></pre><p>设置vim</p><pre><code class="sh">vim ~/.vimrcset ts=4set nu</code></pre><h1 id="Tensorflow框架"><a href="#Tensorflow框架" class="headerlink" title="Tensorflow框架"></a>Tensorflow框架</h1><h4 id="计算图和会话"><a href="#计算图和会话" class="headerlink" title="计算图和会话"></a>计算图和会话</h4><pre><code class="python">#coding:utf-8import tensorflow as tfx = tf.constant([[1.0,2.0]])w = tf.constant([[3.0],[4.0]])y = tf.matmul(x,w)#x与w相乘print ywith tf.Session() as sess:#（这是一个用来计算的会话）不带with后面的，就不计算结果，就只是网络框架    print sess.run(y)</code></pre><h4 id="前向传播"><a href="#前向传播" class="headerlink" title="前向传播"></a>前向传播</h4><pre><code class="python">#coding:utf-8#两层简单神经网络（全连接），两输入，一输出，隐含层三个神经元import tensorflow as tf#输入层，一行两列x = tf.constant([[0.7,0.5]])#网络层的权值，一层神经元有两组连接，权值用随机数生成w1 = tf.Variable(tf.random_normal([2,3],stddev=1,seed=1))w2 = tf.Variable(tf.random_normal([3,1],stddev=1,seed=1))#前向传播过程a = tf.matmul(x,w1)#x与w1矩阵乘y = tf.matmul(a,w2)#a与w2乘#用会话计算结果with tf.Session() as sess:    init_op = tf.global_variables_initializer()    sess.run(init_op)    print sess.run(y)</code></pre><h4 id="反向传播（训练）"><a href="#反向传播（训练）" class="headerlink" title="反向传播（训练）"></a>反向传播（训练）</h4><pre><code class="python">#!/usr/bin/python2.7# coding:utf-8# 喂数据，并训练，共有32组样本# 学习目标：输入为两个随机数，两数和&lt;1时，输出1，否则输出0import tensorflow as tfimport numpyBATCH_SIZE = 8seed = 23455# 基于seed产生随机数：实例化一个随机数生成器rdm = numpy.random.RandomState(seed)# 生成32行2列的随机数作为输入X = rdm.rand(32, 2)# 从X输入的两个数小于1时，Y输出1Y = [[int(x0 + x1 &lt; 1)] for (x0, x1) in X]# 打印样本print &quot;X:\n&quot;, Xprint &quot;Y:\n&quot;, Y# 神经网络的输入输出占位x = tf.placeholder(tf.float32, shape=(None, 2))y_ = tf.placeholder(tf.float32, shape=(None, 1))# 随机生成网络权值w1 = tf.Variable(tf.random_normal([2, 3], stddev=1, seed=1))w2 = tf.Variable(tf.random_normal([3, 1], stddev=1, seed=1))# 相乘a = tf.matmul(x, w1)y = tf.matmul(a, w2)# 损失函数loss = tf.reduce_mean(tf.square(y-y_))# 反向传播（训练）方法，步长=0.001，损失函数值=losstrain_step = tf.train.GradientDescentOptimizer(0.001).minimize(loss)#train_step = tf.train.MomentumOptimizer(0.001, 0.9).minimize(loss)#train_step = tf.train.AdamOptimizer(0.001).minimize(loss)# 生成会话来用样本训练模型with tf.Session() as sess:    init_op = tf.global_variables_initializer()  # 初始化参数    sess.run(init_op)    # 打印出未经训练的模型    print&quot;w1:\n&quot;, sess.run(w1)    print&quot;w2:\n&quot;, sess.run(w2)    # 训练模型    STEPS = 3000    for i in range(STEPS):        start = (i*BATCH_SIZE) % 32  # 每次喂8组数据:0～8,8~16,16~24,24~32        end = start + BATCH_SIZE        # 喂数据训练，使用X[start,end]方式可以超出列表范围，使用X[place]不能超出索引        sess.run(train_step, feed_dict={x: X[start:end], y_: Y[start:end]})        if i % 500 == 0:            total_loss = sess.run(loss, feed_dict={x: X, y_: Y})            print(&quot;训练%d轮后，损失函数值为%g&quot; % (i, total_loss))    # 打印训练后的参数    print&quot;\n&quot;    print&quot;w1:\n&quot;, sess.run(w1)    print&quot;w2:\n&quot;, sess.run(w2)</code></pre><h2 id="神经网络优化"><a href="#神经网络优化" class="headerlink" title="神经网络优化"></a>神经网络优化</h2><h4 id="损失函数-loss-：预测值-y-与已知答案-y-的差距"><a href="#损失函数-loss-：预测值-y-与已知答案-y-的差距" class="headerlink" title="损失函数(loss)：预测值(y)与已知答案(y_)的差距"></a>损失函数(loss)：预测值(y)与已知答案(y_)的差距</h4><p>主流的有三种：</p><ul><li><strong>均方误差mes(Mean Squared Error)</strong><br>$$<br>MSE(y_,y)=\frac{\sum_{i=1}^n(y-y_)^2}{n}<br>$$</li></ul><pre><code class="python">loss_mse = tf.reduce_mean(tf.square(y-y_))</code></pre><ul><li><p><strong>交叉熵ce(Cross Entropy)</strong></p><p>表征两个概率分布之间的距离<br>$$<br>H(y_,y)=-\sum_{i=1}^n(y_*logy)<br>$$</p><pre><code class="python">loss_ce = -tf.reduce_mean(y_*tf.log(tf.clip_by_value(y, 1e-12, 1.0)))#1e-12防止值为0</code></pre><p>当y有n个可能的输出值（即n分类）时，y_与每个y的ce符合概率分布（概率的和为1），使用softmax()函数<br>$$<br>softmax(y_{i})=\frac{e^{y_{i}}}{\sum_{j=1}^{n}e^{y_{i}}}<br>$$</p><pre><code class="python">ce = tf.nn.sparse_softmax_cross_entropy_with_logits(    logits=y, labels=tf.argmax(y_, 1))lose_ce = tf.reduce_mean(ce)</code></pre></li><li><p><strong>自定义损失函数</strong></p><p>例如<br>$$<br>loss(y_,y)=\sum_{i=1}^{n}f(y_,y)<br>$$</p><p>$$<br>f(y_,y) = \left{ {\begin{array}{<em>{20}{c}}<br>{PROFIT</em>(y_ - y)\quad y &lt; y_\quad 预测值小于实际值时，误差乘上PROFIT}\<br>{COST*(y - y_)\quad y &gt;  = y_\quad {\rm{ }} 预测值大于实际值时，误差乘以COST}\end{array}} \right.<br>$$</p><pre><code class="python">loss = tf.reduce_mean(tf.where(tf.grater(y, y_), COST*(y-y_), PROFIT*(y_-y)))</code></pre></li></ul><p><strong>一个训练的示例，损失函数采用均方误差</strong></p><pre><code class="python">#!/usr/bin/python2.7# coding:utf-8# 喂数据，并训练，共有32组样本# 学习目标：Y=x1+x2，并加入随机噪声-0.05~0.05import tensorflow as tfimport numpyBATCH_SIZE = 8seed = 23455rdm = numpy.random.RandomState(seed)# 目标模型X = rdm.rand(32, 2)Y_ = [[x1+x2+(rdm.rand()/10.0-0.05)] for (x1, x2) in X]# 神经网络模型，单层，没有隐含层x = tf.placeholder(tf.float32, shape=(None, 2))y_ = tf.placeholder(tf.float32, shape=(None, 1))w1 = tf.Variable(tf.random_normal([2, 1], stddev=1, seed=1))y = tf.matmul(x, w1)# 损失函数为MSE（均方误差）loss_mse = tf.reduce_mean(tf.square(y-y_))# 训练过程为梯度下降法train_step = tf.train.GradientDescentOptimizer(0.001).minimize(loss_mse)# 生成会话，训练STEP轮with tf.Session() as sess:    init_op = tf.global_variables_initializer()    sess.run(init_op)    STEPS = 20000    for i in range(STEPS):        start = (i*BATCH_SIZE) % 32        end = start + BATCH_SIZE        sess.run(train_step, feed_dict={x: X[start:end], y_: Y_[start:end]})        if i % 500 == 0:            total_loss = sess.run(loss_mse, feed_dict={x: X, y_: Y_})            print(&quot;训练%d轮后，损失函数值为%g&quot; % (i, total_loss))            print &quot;w1为：\n&quot;, sess.run(w1)    # 打印训练后的参数    print (&quot;\n&quot;)    print &quot;w1:\n&quot;, sess.run(w1)</code></pre><h4 id="学习率-learning-rate-：每次参数更新的幅度"><a href="#学习率-learning-rate-：每次参数更新的幅度" class="headerlink" title="学习率(learning_rate)：每次参数更新的幅度"></a>学习率(learning_rate)：每次参数更新的幅度</h4><p>$$<br>W_{n_1}=W_{n}-learning_rate*\nabla<br>$$</p><p>​            ▽为损失函数的梯度(倒数)，learning_rate为常数(用户自定义的学习率)</p><p><strong>指数衰减学习率</strong><br>$$<br>learning_rate=LEARNING_RATE_BASE*{LEARNING_RATE_DECAY}^{\frac{global_step}{LEARNING_RATE_STEP}}<br>$$</p><pre><code class="python">#!/usr/bin/python2.7# coding:utf-8# 单神经元，自定义损失函数loss=(w+1)^2，学习率为0.2，w初值为5；为了使loss最小时，w的最终结果应为-1import tensorflow as tfw = tf.Variable(tf.constant(5, dtype=tf.float32))  # 神经网络loss = tf.square(w+1)  # 损失函数# 指数衰减学习率参数LEARNING_RATE_BASE = 0.1  # 最初学习率LEARNING_RATE_DECAY = 0.99  # 学习率的衰减率LEARNING_RATE_STEP = 2  # 每多少轮更新一次学习率，一般为:样本总数/BATCH_SIZEglobal_step = tf.Variable(0, trainable=False)  # 当前是第几轮# 定义学习率learning_rate = tf.train.exponential_decay(    LEARNING_RATE_BASE, global_step, LEARNING_RATE_STEP,    LEARNING_RATE_DECAY, staircase=True)# 反向传播方法train_step = tf.train.GradientDescentOptimizer(    learning_rate).minimize(loss, global_step=global_step)# 定义会话，训练40轮with tf.Session() as sess:    init_op = tf.global_variables_initializer()    sess.run(init_op)    for i in range(40):        sess.run(train_step)        # 数据打印        learning_rate_val = sess.run(learning_rate)        w_val = sess.run(w)        loss_val = sess.run(loss)        learning_rate_val = sess.run(learning_rate)        global_step_val = sess.run(global_step)        print &quot;训练%s轮后，w值为%f，loss值为%f，学习率为%s，step为%s&quot; % (            i, w_val, loss_val, learning_rate_val, global_step_val)</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GitHub常用命令</title>
      <link href="/2020/03/06/GitHub/"/>
      <url>/2020/03/06/GitHub/</url>
      
        <content type="html"><![CDATA[<h3 id="1-注册和创建储存库"><a href="#1-注册和创建储存库" class="headerlink" title="1. 注册和创建储存库"></a>1. 注册和创建储存库</h3><p><a href="https://www.jianshu.com/p/68b9e463333f" target="_blank" rel="noopener">教程</a></p><p>创建的存储库地址为：<a href="https://github.com/liuly123/ORB-SLAM2。下面以此为背景" target="_blank" rel="noopener">https://github.com/liuly123/ORB-SLAM2。下面以此为背景</a></p><h3 id="2-Ubuntu"><a href="#2-Ubuntu" class="headerlink" title="2. Ubuntu"></a>2. Ubuntu</h3><h4 id="2-1-初始化"><a href="#2-1-初始化" class="headerlink" title="2.1 初始化"></a>2.1 初始化</h4><pre><code class="sh">#设置用户名和邮箱git config --global user.name &quot;liuly123&quot;git config --global user.email &quot;2240057686@qq.com&quot;#生成keyssh-keygen -t rsa -C &quot;2240057686@qq.com&quot;#复制生成的ssh keycat ~/.ssh/id_rsa.pub#粘贴到网站上：登录github-&gt; Your profile -&gt; 右边Edit profile -&gt; SSH and GPG Keys-&gt; New SSH key添加</code></pre><h4 id="2-2-新建一个本地仓库"><a href="#2-2-新建一个本地仓库" class="headerlink" title="2.2 新建一个本地仓库"></a>2.2 新建一个本地仓库</h4><pre><code class="sh">cd ORB-SLAM2#初始化git init#添加github的地址，使用ssh方式可以避免每次输入密码（打开repository-&gt;clone or download -&gt; Use SSH -&gt; 复制地址）git  remote add origin git@github.com:liuly123/ORB-SLAM2.git#同步本地文件（commit）git add -Agit commit -m &#39;本次commit的说明&#39;git push origin master</code></pre><p><strong>以后每次提交更改</strong></p><pre><code class="sh">cd ORB-SLAM2git add -Agit commit -m &#39;本次commit的说明&#39;git push origin master</code></pre><h3 id="2-3其他说明"><a href="#2-3其他说明" class="headerlink" title="2.3其他说明"></a>2.3其他说明</h3><pre><code class="sh">#查看同步状态git status#强制同步（会覆盖之前的所有版本），第一次一般需要git push -u origin +master#注意：无法上传超过100M的文件#同步大文件出错的解决办法：#查看commit idgit log#回退到之前版本（本地文件也会别修改、删除）git reset --hard 9ff7cad52bce71a0fb7a57928e1673f1a4f536f1#本地与远程保持同步git pull origin master#抓取远程仓库git clone git@github.com:liuly123/Note.git</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu常用命令</title>
      <link href="/2020/03/06/Ubuntu%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/03/06/Ubuntu%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="安装Typora"><a href="#安装Typora" class="headerlink" title="安装Typora"></a>安装Typora</h4><p>地址<a href="https://support.typora.io/Typora-on-Linux/" target="_blank" rel="noopener">https://support.typora.io/Typora-on-Linux/</a></p><pre><code class="sh">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key addsudo add-apt-repository &#39;deb https://typora.io/linux ./&#39;sudo apt-get updatesudo apt-get install typora</code></pre><p>另一款remarkable</p><h4 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h4><p><a href="https://blog.csdn.net/seniusen/article/details/79815107" target="_blank" rel="noopener">链接</a></p><h4 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h4><p><a href="https://github.com/qingshuisiyuan/electron-ssr-backup" target="_blank" rel="noopener">教程</a></p><h4 id="安装搜狗拼音"><a href="#安装搜狗拼音" class="headerlink" title="安装搜狗拼音"></a>安装搜狗拼音</h4><p>地址<a href="https://pinyin.sogou.com/linux/" target="_blank" rel="noopener">https://pinyin.sogou.com/linux/</a></p><p>不要从系统设置里修改，在任务栏上修改</p><h4 id="设置rtc时间"><a href="#设置rtc时间" class="headerlink" title="设置rtc时间"></a>设置rtc时间</h4><pre><code class="sh">timedatectl set-local-rtc true</code></pre><h4 id="安装CLion"><a href="#安装CLion" class="headerlink" title="安装CLion"></a>安装CLion</h4><p><a href="https://blog.csdn.net/u010925447/article/details/73251780" target="_blank" rel="noopener">教程</a>，<a href="https://www.jetbrains.com/clion/download/#section=linux" target="_blank" rel="noopener">下载地址</a></p><p>账号：<a href="mailto:2240057686@qq.com">2240057686@qq.com</a></p><p>密码：abc12345@</p><p><a href="https://github.com/pingfangx/jetbrains-in-chinese/tree/master/CLion" target="_blank" rel="noopener">汉化</a></p><p><strong>修改字体：</strong>设置&gt;编辑器&gt;切换配色方案&gt;Color Scheme Font&gt;备用字体&gt;SimSun(已经安装windows字体)。（其他的备用字体最好也换，如Console Font）</p><p><strong>远程调试：</strong></p><p><img src="assets/image-20200113102243144.png" alt="image-20200113102243144"></p><p><strong>乱码问题：</strong>帮助-&gt;编辑自定义VM选项，添加</p><pre><code class="ini">-Dconsole.encoding=UTF-8-Dfile.encoding=UTF-8</code></pre><h4 id="添加设备文件读写权限"><a href="#添加设备文件读写权限" class="headerlink" title="添加设备文件读写权限"></a>添加设备文件读写权限</h4><pre><code class="sh">sudo usermod -a -G dialout $USERsudo chmod a+rw /dev/ttyUSB0</code></pre><h4 id="安装wps"><a href="#安装wps" class="headerlink" title="安装wps"></a>安装wps</h4><p>下载地址<a href="http://linux.wps.cn/" target="_blank" rel="noopener">http://linux.wps.cn/</a></p><h4 id="安装录屏软件"><a href="#安装录屏软件" class="headerlink" title="安装录屏软件"></a>安装录屏软件</h4><pre><code class="sh">sudo add-apt-repository ppa:maarten-baert/simplescreenrecordersudo apt updatesudo apt install simplescreenrecorder</code></pre><h4 id="安装chrome"><a href="#安装chrome" class="headerlink" title="安装chrome"></a>安装chrome</h4><pre><code class="sh">wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -echo &#39;deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main&#39; | sudo tee /etc/apt/sources.list.d/google-chrome.listsudo apt-get update sudo apt-get install google-chrome-stable</code></pre><p>或者直接<a href="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb" target="_blank" rel="noopener">下载</a></p><h4 id="安装中国版火狐"><a href="#安装中国版火狐" class="headerlink" title="安装中国版火狐"></a>安装中国版火狐</h4><p><a href="http://www.firefox.com.cn/download/" target="_blank" rel="noopener">下载</a>，解压</p><pre><code class="sh">sudo apt remove firefoxsudo mv firefox /opt #firefox是解压得到的文件夹cd /usr/share/applicationssudo gedit firefox.desktop</code></pre><p>内容为</p><pre><code>[Desktop Entry]Name=firefoxName[zh_CN]=火狐浏览器Comment=火狐浏览器Exec=/opt/firefox/firefoxIcon=/opt/firefox/browser/chrome/icons/default/default128.pngTerminal=falseType=ApplicationCategories=Appliction;Encoding=UTF-8StartupNotify=true</code></pre><h4 id="状态栏网速"><a href="#状态栏网速" class="headerlink" title="状态栏网速"></a>状态栏网速</h4><pre><code class="sh">sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitorsudo apt-get updatesudo apt-get install indicator-sysmonitorindicator-sysmonitor &amp;#设置开机启动</code></pre><h4 id="Understand代码分析"><a href="#Understand代码分析" class="headerlink" title="Understand代码分析"></a>Understand代码分析</h4><p><a href="https://scitools.com/download/all-builds/" target="_blank" rel="noopener">https://scitools.com/download/all-builds/</a></p><p><strong>添加环境变量</strong></p><pre><code class="sh">export PATH=&quot;$PATH:/home/liuly/snap/scitools/bin/linux64&quot;</code></pre><p><strong>输入license</strong></p><p>enter liscense &gt; option &gt; use lagacy licensing &gt; 输入09E58CD1FB79</p><p><strong>添加快捷方式</strong></p><pre><code class="sh">[Desktop Entry]Name=understandType=ApplicationComment=scitools understandIcon=/home/liuly/snap/scitools/bin/linux64/understand_64.pngExec=/home/liuly/snap/scitools/bin/linux64/understand %FTerminal=falseCategories=Development;</code></pre><h4 id="安装VScode"><a href="#安装VScode" class="headerlink" title="安装VScode"></a>安装VScode</h4><p><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">https://code.visualstudio.com/Download</a></p><p><strong>设置中文</strong></p><p>商店搜索Chinese，安装<code>适用于 VS Code 的中文（简体）语言包</code>，并设置<code>locale.json</code></p><p><strong>扩展</strong></p><p><code>C/C++</code> <code>Python</code> <code>ROS</code></p><h4 id="RoboWare"><a href="#RoboWare" class="headerlink" title="RoboWare"></a>RoboWare</h4><p><a href="https://github.com/TonyRobotics/RoboWare/tree/master/Studio" target="_blank" rel="noopener">https://github.com/TonyRobotics/RoboWare/tree/master/Studio</a></p><h4 id="修改grub主题"><a href="#修改grub主题" class="headerlink" title="修改grub主题"></a>修改grub主题</h4><p><a href="https://blog.csdn.net/w84963568/article/details/78884003" target="_blank" rel="noopener">https://blog.csdn.net/w84963568/article/details/78884003</a></p><h4 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h4><p>字体<a href="https://www.cnblogs.com/Dylansuns/p/7648002.html" target="_blank" rel="noopener">参考</a>，还有time和simhei</p><pre><code class="sh">cd /usr/share/fonts/winfontscp ~/msyh.ttf ./sudo chmod 644 *sudo mkfontscale #创建雅黑字体的fonts.scale文件，它用来控制字体旋转缩放sudo mkfontdir #创建雅黑字体的fonts.dir文件，它用来控制字体粗斜体产生sudo fc-cache -fv #建立字体缓存信息，也就是让系统认识雅黑</code></pre><h4 id="终端分屏"><a href="#终端分屏" class="headerlink" title="终端分屏"></a>终端分屏</h4><pre><code class="bash">sudo apt install terminator</code></pre><p>使用</p><pre><code>Ctrl+Shift+E    垂直分割窗口Ctrl+Shift+O    水平分割窗口    F11         全屏Ctrl+Shift+C    复制Ctrl+Shift+V    粘贴Ctrl+Shift+N    或者 Ctrl+Tab 在分割的各窗口之间切换Ctrl+Shift+X    将分割的某一个窗口放大至全屏使用Ctrl+Shift+Z    从放大至全屏的某一窗口回到多窗格界面</code></pre><h4 id="双系统蓝牙鼠标"><a href="#双系统蓝牙鼠标" class="headerlink" title="双系统蓝牙鼠标"></a>双系统蓝牙鼠标</h4><p><a href="https://www.jianshu.com/p/56f6b0dc231e" target="_blank" rel="noopener">https://www.jianshu.com/p/56f6b0dc231e</a></p><h4 id="批量修改文件夹-文件权限"><a href="#批量修改文件夹-文件权限" class="headerlink" title="批量修改文件夹/文件权限"></a>批量修改文件夹/文件权限</h4><pre><code class="sh">#当前目录下及递归find -type d|xargs chmod 755find -type f|xargs chmod 664</code></pre><h4 id="源码安装cmake"><a href="#源码安装cmake" class="headerlink" title="源码安装cmake"></a>源码安装cmake</h4><p><a href="https://cmake.org/download/" target="_blank" rel="noopener">下载</a></p><pre><code class="sh">#编译安装，不要卸载原来的tar -xzvf cmake-3.14.5.tar.gzcd cmake-3.14.5./bootstrapmakesudo make install</code></pre><h4 id="安装rtk8811cu驱动"><a href="#安装rtk8811cu驱动" class="headerlink" title="安装rtk8811cu驱动"></a>安装rtk8811cu驱动</h4><pre><code class="sh">git clone https://github.com/whitebatman2/rtl8821CUcd rtl8821CUmakesudo make installsudo modprobe 8821cu</code></pre><h4 id="修改ROS源"><a href="#修改ROS源" class="headerlink" title="修改ROS源"></a>修改ROS源</h4><pre><code class="sh">sudo sh -c &#39;echo &quot;deb http://mirrors.ustc.edu.cn/ros/ubuntu/ $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#39;wget https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -O - | sudo apt-key add -</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
