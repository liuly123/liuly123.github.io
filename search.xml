<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Tensorflow笔记</title>
      <link href="/2020/03/06/Tensorflow%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/06/Tensorflow%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/tensorflow/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/tensorflow/</a></p><p>需要先安装pip： <code>sudo apt install python-pip</code></p><p>选择<code>Linux</code>，<code>cp27</code>，<code>1.3.0</code>，复制代码安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install \</span><br><span class="line">  -i https://pypi.tuna.tsinghua.edu.cn/simple/ \</span><br><span class="line">  https://mirrors.tuna.tsinghua.edu.cn/tensorflow/linux/cpu/tensorflow-1.3.0-cp27-none-linux_x86_64.whl</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">tf.__version__</span><br></pre></td></tr></table></figure><p>设置vim</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.vimrc</span><br><span class="line"><span class="built_in">set</span> ts=4</span><br><span class="line"><span class="built_in">set</span> nu</span><br></pre></td></tr></table></figure><h1 id="Tensorflow框架"><a href="#Tensorflow框架" class="headerlink" title="Tensorflow框架"></a>Tensorflow框架</h1><h4 id="计算图和会话"><a href="#计算图和会话" class="headerlink" title="计算图和会话"></a>计算图和会话</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">x = tf.constant([[<span class="number">1.0</span>,<span class="number">2.0</span>]])</span><br><span class="line">w = tf.constant([[<span class="number">3.0</span>],[<span class="number">4.0</span>]])</span><br><span class="line">y = tf.matmul(x,w)<span class="comment">#x与w相乘</span></span><br><span class="line"><span class="keyword">print</span> y</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:<span class="comment">#（这是一个用来计算的会话）不带with后面的，就不计算结果，就只是网络框架</span></span><br><span class="line"><span class="keyword">print</span> sess.run(y)</span><br></pre></td></tr></table></figure><h4 id="前向传播"><a href="#前向传播" class="headerlink" title="前向传播"></a>前向传播</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#两层简单神经网络（全连接），两输入，一输出，隐含层三个神经元</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment">#输入层，一行两列</span></span><br><span class="line">x = tf.constant([[<span class="number">0.7</span>,<span class="number">0.5</span>]])</span><br><span class="line"><span class="comment">#网络层的权值，一层神经元有两组连接，权值用随机数生成</span></span><br><span class="line">w1 = tf.Variable(tf.random_normal([<span class="number">2</span>,<span class="number">3</span>],stddev=<span class="number">1</span>,seed=<span class="number">1</span>))</span><br><span class="line">w2 = tf.Variable(tf.random_normal([<span class="number">3</span>,<span class="number">1</span>],stddev=<span class="number">1</span>,seed=<span class="number">1</span>))</span><br><span class="line"><span class="comment">#前向传播过程</span></span><br><span class="line">a = tf.matmul(x,w1)<span class="comment">#x与w1矩阵乘</span></span><br><span class="line">y = tf.matmul(a,w2)<span class="comment">#a与w2乘</span></span><br><span class="line"><span class="comment">#用会话计算结果</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">init_op = tf.global_variables_initializer()</span><br><span class="line">sess.run(init_op)</span><br><span class="line"><span class="keyword">print</span> sess.run(y)</span><br></pre></td></tr></table></figure><h4 id="反向传播（训练）"><a href="#反向传播（训练）" class="headerlink" title="反向传播（训练）"></a>反向传播（训练）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2.7</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 喂数据，并训练，共有32组样本</span></span><br><span class="line"><span class="comment"># 学习目标：输入为两个随机数，两数和&lt;1时，输出1，否则输出0</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line">BATCH_SIZE = <span class="number">8</span></span><br><span class="line">seed = <span class="number">23455</span></span><br><span class="line"><span class="comment"># 基于seed产生随机数：实例化一个随机数生成器</span></span><br><span class="line">rdm = numpy.random.RandomState(seed)</span><br><span class="line"><span class="comment"># 生成32行2列的随机数作为输入</span></span><br><span class="line">X = rdm.rand(<span class="number">32</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 从X输入的两个数小于1时，Y输出1</span></span><br><span class="line">Y = [[int(x0 + x1 &lt; <span class="number">1</span>)] <span class="keyword">for</span> (x0, x1) <span class="keyword">in</span> X]</span><br><span class="line"><span class="comment"># 打印样本</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"X:\n"</span>, X</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Y:\n"</span>, Y</span><br><span class="line"><span class="comment"># 神经网络的输入输出占位</span></span><br><span class="line">x = tf.placeholder(tf.float32, shape=(<span class="literal">None</span>, <span class="number">2</span>))</span><br><span class="line">y_ = tf.placeholder(tf.float32, shape=(<span class="literal">None</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 随机生成网络权值</span></span><br><span class="line">w1 = tf.Variable(tf.random_normal([<span class="number">2</span>, <span class="number">3</span>], stddev=<span class="number">1</span>, seed=<span class="number">1</span>))</span><br><span class="line">w2 = tf.Variable(tf.random_normal([<span class="number">3</span>, <span class="number">1</span>], stddev=<span class="number">1</span>, seed=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 相乘</span></span><br><span class="line">a = tf.matmul(x, w1)</span><br><span class="line">y = tf.matmul(a, w2)</span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">loss = tf.reduce_mean(tf.square(y-y_))</span><br><span class="line"><span class="comment"># 反向传播（训练）方法，步长=0.001，损失函数值=loss</span></span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.001</span>).minimize(loss)</span><br><span class="line"><span class="comment">#train_step = tf.train.MomentumOptimizer(0.001, 0.9).minimize(loss)</span></span><br><span class="line"><span class="comment">#train_step = tf.train.AdamOptimizer(0.001).minimize(loss)</span></span><br><span class="line"><span class="comment"># 生成会话来用样本训练模型</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    init_op = tf.global_variables_initializer()  <span class="comment"># 初始化参数</span></span><br><span class="line">    sess.run(init_op)</span><br><span class="line">    <span class="comment"># 打印出未经训练的模型</span></span><br><span class="line">    <span class="keyword">print</span><span class="string">"w1:\n"</span>, sess.run(w1)</span><br><span class="line">    <span class="keyword">print</span><span class="string">"w2:\n"</span>, sess.run(w2)</span><br><span class="line">    <span class="comment"># 训练模型</span></span><br><span class="line">    STEPS = <span class="number">3000</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(STEPS):</span><br><span class="line">        start = (i*BATCH_SIZE) % <span class="number">32</span>  <span class="comment"># 每次喂8组数据:0～8,8~16,16~24,24~32</span></span><br><span class="line">        end = start + BATCH_SIZE</span><br><span class="line">        <span class="comment"># 喂数据训练，使用X[start,end]方式可以超出列表范围，使用X[place]不能超出索引</span></span><br><span class="line">        sess.run(train_step, feed_dict=&#123;x: X[start:end], y_: Y[start:end]&#125;)</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">500</span> == <span class="number">0</span>:</span><br><span class="line">            total_loss = sess.run(loss, feed_dict=&#123;x: X, y_: Y&#125;)</span><br><span class="line">            print(<span class="string">"训练%d轮后，损失函数值为%g"</span> % (i, total_loss))</span><br><span class="line">    <span class="comment"># 打印训练后的参数</span></span><br><span class="line">    <span class="keyword">print</span><span class="string">"\n"</span></span><br><span class="line">    <span class="keyword">print</span><span class="string">"w1:\n"</span>, sess.run(w1)</span><br><span class="line">    <span class="keyword">print</span><span class="string">"w2:\n"</span>, sess.run(w2)</span><br></pre></td></tr></table></figure><h2 id="神经网络优化"><a href="#神经网络优化" class="headerlink" title="神经网络优化"></a>神经网络优化</h2><h4 id="损失函数-loss-：预测值-y-与已知答案-y-的差距"><a href="#损失函数-loss-：预测值-y-与已知答案-y-的差距" class="headerlink" title="损失函数(loss)：预测值(y)与已知答案(y_)的差距"></a>损失函数(loss)：预测值(y)与已知答案(y_)的差距</h4><p>主流的有三种：</p><ul><li><strong>均方误差mes(Mean Squared Error)</strong><br>$$<br>MSE(y_,y)=\frac{\sum_{i=1}^n(y-y_)^2}{n}<br>$$</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss_mse = tf.reduce_mean(tf.square(y-y_))</span><br></pre></td></tr></table></figure><ul><li><p><strong>交叉熵ce(Cross Entropy)</strong></p><p>表征两个概率分布之间的距离<br>$$<br>H(y_,y)=-\sum_{i=1}^n(y_*logy)<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss_ce = -tf.reduce_mean(y_*tf.log(tf.clip_by_value(y, <span class="number">1e-12</span>, <span class="number">1.0</span>)))<span class="comment">#1e-12防止值为0</span></span><br></pre></td></tr></table></figure><p>当y有n个可能的输出值（即n分类）时，y_与每个y的ce符合概率分布（概率的和为1），使用softmax()函数<br>$$<br>softmax(y_{i})=\frac{e^{y_{i}}}{\sum_{j=1}^{n}e^{y_{i}}}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ce = tf.nn.sparse_softmax_cross_entropy_with_logits(</span><br><span class="line">    logits=y, labels=tf.argmax(y_, <span class="number">1</span>))</span><br><span class="line">lose_ce = tf.reduce_mean(ce)</span><br></pre></td></tr></table></figure></li><li><p><strong>自定义损失函数</strong></p><p>例如<br>$$<br>loss(y_,y)=\sum_{i=1}^{n}f(y_,y)\<br>f(y_,y)=\left{<br>\begin{aligned}<br>PROFIT<em>(y_-y) \quad y&lt;y_ \quad 预测值小于实际值时，误差乘上PROFIT \<br>COST</em>(y-y_) \quad y&gt;=y_ \quad 预测值大于误差值时，误差乘以COST<br>\end{aligned}<br>\right.<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss = tf.reduce_mean(tf.where(tf.grater(y, y_), COST*(y-y_), PROFIT*(y_-y)))</span><br></pre></td></tr></table></figure></li></ul><p><strong>一个训练的示例，损失函数采用均方误差</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2.7</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 喂数据，并训练，共有32组样本</span></span><br><span class="line"><span class="comment"># 学习目标：Y=x1+x2，并加入随机噪声-0.05~0.05</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line">BATCH_SIZE = <span class="number">8</span></span><br><span class="line">seed = <span class="number">23455</span></span><br><span class="line">rdm = numpy.random.RandomState(seed)</span><br><span class="line"><span class="comment"># 目标模型</span></span><br><span class="line">X = rdm.rand(<span class="number">32</span>, <span class="number">2</span>)</span><br><span class="line">Y_ = [[x1+x2+(rdm.rand()/<span class="number">10.0</span><span class="number">-0.05</span>)] <span class="keyword">for</span> (x1, x2) <span class="keyword">in</span> X]</span><br><span class="line"><span class="comment"># 神经网络模型，单层，没有隐含层</span></span><br><span class="line">x = tf.placeholder(tf.float32, shape=(<span class="literal">None</span>, <span class="number">2</span>))</span><br><span class="line">y_ = tf.placeholder(tf.float32, shape=(<span class="literal">None</span>, <span class="number">1</span>))</span><br><span class="line">w1 = tf.Variable(tf.random_normal([<span class="number">2</span>, <span class="number">1</span>], stddev=<span class="number">1</span>, seed=<span class="number">1</span>))</span><br><span class="line">y = tf.matmul(x, w1)</span><br><span class="line"><span class="comment"># 损失函数为MSE（均方误差）</span></span><br><span class="line">loss_mse = tf.reduce_mean(tf.square(y-y_))</span><br><span class="line"><span class="comment"># 训练过程为梯度下降法</span></span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.001</span>).minimize(loss_mse)</span><br><span class="line"><span class="comment"># 生成会话，训练STEP轮</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    init_op = tf.global_variables_initializer()</span><br><span class="line">    sess.run(init_op)</span><br><span class="line">    STEPS = <span class="number">20000</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(STEPS):</span><br><span class="line">        start = (i*BATCH_SIZE) % <span class="number">32</span></span><br><span class="line">        end = start + BATCH_SIZE</span><br><span class="line">        sess.run(train_step, feed_dict=&#123;x: X[start:end], y_: Y_[start:end]&#125;)</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">500</span> == <span class="number">0</span>:</span><br><span class="line">            total_loss = sess.run(loss_mse, feed_dict=&#123;x: X, y_: Y_&#125;)</span><br><span class="line">            print(<span class="string">"训练%d轮后，损失函数值为%g"</span> % (i, total_loss))</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"w1为：\n"</span>, sess.run(w1)</span><br><span class="line">    <span class="comment"># 打印训练后的参数</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"\n"</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"w1:\n"</span>, sess.run(w1)</span><br></pre></td></tr></table></figure><h4 id="学习率-learning-rate-：每次参数更新的幅度"><a href="#学习率-learning-rate-：每次参数更新的幅度" class="headerlink" title="学习率(learning_rate)：每次参数更新的幅度"></a>学习率(learning_rate)：每次参数更新的幅度</h4><p>$$<br>W_{n_1}=W_{n}-learning_rate*\nabla<br>$$</p><p>​            ▽为损失函数的梯度(倒数)，learning_rate为常数(用户自定义的学习率)</p><p><strong>指数衰减学习率</strong><br>$$<br>learning_rate=LEARNING_RATE_BASE*{LEARNING_RATE_DECAY}^{\frac{global_step}{LEARNING_RATE_STEP}}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2.7</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单神经元，自定义损失函数loss=(w+1)^2，学习率为0.2，w初值为5；为了使loss最小时，w的最终结果应为-1</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">w = tf.Variable(tf.constant(<span class="number">5</span>, dtype=tf.float32))  <span class="comment"># 神经网络</span></span><br><span class="line">loss = tf.square(w+<span class="number">1</span>)  <span class="comment"># 损失函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指数衰减学习率参数</span></span><br><span class="line">LEARNING_RATE_BASE = <span class="number">0.1</span>  <span class="comment"># 最初学习率</span></span><br><span class="line">LEARNING_RATE_DECAY = <span class="number">0.99</span>  <span class="comment"># 学习率的衰减率</span></span><br><span class="line">LEARNING_RATE_STEP = <span class="number">2</span>  <span class="comment"># 每多少轮更新一次学习率，一般为:样本总数/BATCH_SIZE</span></span><br><span class="line">global_step = tf.Variable(<span class="number">0</span>, trainable=<span class="literal">False</span>)  <span class="comment"># 当前是第几轮</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义学习率</span></span><br><span class="line">learning_rate = tf.train.exponential_decay(</span><br><span class="line">    LEARNING_RATE_BASE, global_step, LEARNING_RATE_STEP,</span><br><span class="line">    LEARNING_RATE_DECAY, staircase=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向传播方法</span></span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(</span><br><span class="line">    learning_rate).minimize(loss, global_step=global_step)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义会话，训练40轮</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    init_op = tf.global_variables_initializer()</span><br><span class="line">    sess.run(init_op)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">40</span>):</span><br><span class="line">        sess.run(train_step)</span><br><span class="line">        <span class="comment"># 数据打印</span></span><br><span class="line">        learning_rate_val = sess.run(learning_rate)</span><br><span class="line">        w_val = sess.run(w)</span><br><span class="line">        loss_val = sess.run(loss)</span><br><span class="line">        learning_rate_val = sess.run(learning_rate)</span><br><span class="line">        global_step_val = sess.run(global_step)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"训练%s轮后，w值为%f，loss值为%f，学习率为%s，step为%s"</span> % (</span><br><span class="line">            i, w_val, loss_val, learning_rate_val, global_step_val)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu常用命令</title>
      <link href="/2020/03/06/Ubuntu%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/03/06/Ubuntu%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="安装Typora"><a href="#安装Typora" class="headerlink" title="安装Typora"></a>安装Typora</h4><p>地址<a href="https://support.typora.io/Typora-on-Linux/" target="_blank" rel="noopener">https://support.typora.io/Typora-on-Linux/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add</span><br><span class="line">sudo add-apt-repository <span class="string">'deb https://typora.io/linux ./'</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install typora</span><br></pre></td></tr></table></figure><p>另一款remarkable</p><h4 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h4><p><a href="https://blog.csdn.net/seniusen/article/details/79815107" target="_blank" rel="noopener">链接</a></p><h4 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h4><p><a href="https://github.com/qingshuisiyuan/electron-ssr-backup" target="_blank" rel="noopener">教程</a></p><h4 id="安装搜狗拼音"><a href="#安装搜狗拼音" class="headerlink" title="安装搜狗拼音"></a>安装搜狗拼音</h4><p>地址<a href="https://pinyin.sogou.com/linux/" target="_blank" rel="noopener">https://pinyin.sogou.com/linux/</a></p><p>不要从系统设置里修改，在任务栏上修改</p><h4 id="设置rtc时间"><a href="#设置rtc时间" class="headerlink" title="设置rtc时间"></a>设置rtc时间</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl <span class="built_in">set</span>-local-rtc <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="安装CLion"><a href="#安装CLion" class="headerlink" title="安装CLion"></a>安装CLion</h4><p><a href="https://blog.csdn.net/u010925447/article/details/73251780" target="_blank" rel="noopener">教程</a>，<a href="https://www.jetbrains.com/clion/download/#section=linux" target="_blank" rel="noopener">下载地址</a></p><p>账号：<a href="mailto:2240057686@qq.com">2240057686@qq.com</a></p><p>密码：abc12345@</p><p><a href="https://github.com/pingfangx/jetbrains-in-chinese/tree/master/CLion" target="_blank" rel="noopener">汉化</a></p><p><strong>修改字体：</strong>设置&gt;编辑器&gt;切换配色方案&gt;Color Scheme Font&gt;备用字体&gt;SimSun(已经安装windows字体)。（其他的备用字体最好也换，如Console Font）</p><p><strong>远程调试：</strong></p><p><img src="assets/image-20200113102243144.png" alt="image-20200113102243144"></p><p><strong>乱码问题：</strong>帮助-&gt;编辑自定义VM选项，添加</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">-Dconsole.encoding</span>=UTF-<span class="number">8</span></span><br><span class="line"><span class="attr">-Dfile.encoding</span>=UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="添加设备文件读写权限"><a href="#添加设备文件读写权限" class="headerlink" title="添加设备文件读写权限"></a>添加设备文件读写权限</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G dialout <span class="variable">$USER</span></span><br><span class="line">sudo chmod a+rw /dev/ttyUSB0</span><br></pre></td></tr></table></figure><h4 id="安装wps"><a href="#安装wps" class="headerlink" title="安装wps"></a>安装wps</h4><p>下载地址<a href="http://linux.wps.cn/" target="_blank" rel="noopener">http://linux.wps.cn/</a></p><h4 id="安装录屏软件"><a href="#安装录屏软件" class="headerlink" title="安装录屏软件"></a>安装录屏软件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:maarten-baert/simplescreenrecorder</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install simplescreenrecorder</span><br></pre></td></tr></table></figure><h4 id="安装chrome"><a href="#安装chrome" class="headerlink" title="安装chrome"></a>安装chrome</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main'</span> | sudo tee /etc/apt/sources.list.d/google-chrome.list</span><br><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get install google-chrome-stable</span><br></pre></td></tr></table></figure><p>或者直接<a href="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb" target="_blank" rel="noopener">下载</a></p><h4 id="安装中国版火狐"><a href="#安装中国版火狐" class="headerlink" title="安装中国版火狐"></a>安装中国版火狐</h4><p><a href="http://www.firefox.com.cn/download/" target="_blank" rel="noopener">下载</a>，解压</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove firefox</span><br><span class="line">sudo mv firefox /opt <span class="comment">#firefox是解压得到的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /usr/share/applications</span><br><span class="line">sudo gedit firefox.desktop</span><br></pre></td></tr></table></figure><p>内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name&#x3D;firefox</span><br><span class="line">Name[zh_CN]&#x3D;火狐浏览器</span><br><span class="line">Comment&#x3D;火狐浏览器</span><br><span class="line">Exec&#x3D;&#x2F;opt&#x2F;firefox&#x2F;firefox</span><br><span class="line">Icon&#x3D;&#x2F;opt&#x2F;firefox&#x2F;browser&#x2F;chrome&#x2F;icons&#x2F;default&#x2F;default128.png</span><br><span class="line">Terminal&#x3D;false</span><br><span class="line">Type&#x3D;Application</span><br><span class="line">Categories&#x3D;Appliction;</span><br><span class="line">Encoding&#x3D;UTF-8</span><br><span class="line">StartupNotify&#x3D;true</span><br></pre></td></tr></table></figure><h4 id="状态栏网速"><a href="#状态栏网速" class="headerlink" title="状态栏网速"></a>状态栏网速</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install indicator-sysmonitor</span><br><span class="line">indicator-sysmonitor &amp;</span><br><span class="line"><span class="comment">#设置开机启动</span></span><br></pre></td></tr></table></figure><h4 id="Understand代码分析"><a href="#Understand代码分析" class="headerlink" title="Understand代码分析"></a>Understand代码分析</h4><p><a href="https://scitools.com/download/all-builds/" target="_blank" rel="noopener">https://scitools.com/download/all-builds/</a></p><p><strong>添加环境变量</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:/home/liuly/snap/scitools/bin/linux64"</span></span><br></pre></td></tr></table></figure><p><strong>输入license</strong></p><p>enter liscense &gt; option &gt; use lagacy licensing &gt; 输入09E58CD1FB79</p><p><strong>添加快捷方式</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=understand</span><br><span class="line">Type=Application</span><br><span class="line">Comment=scitools understand</span><br><span class="line">Icon=/home/liuly/snap/scitools/bin/linux64/understand_64.png</span><br><span class="line">Exec=/home/liuly/snap/scitools/bin/linux64/understand %F</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">Categories=Development;</span><br></pre></td></tr></table></figure><h4 id="安装VScode"><a href="#安装VScode" class="headerlink" title="安装VScode"></a>安装VScode</h4><p><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">https://code.visualstudio.com/Download</a></p><p><strong>设置中文</strong></p><p>商店搜索Chinese，安装<code>适用于 VS Code 的中文（简体）语言包</code>，并设置<code>locale.json</code></p><p><strong>扩展</strong></p><p><code>C/C++</code> <code>Python</code> <code>ROS</code></p><h4 id="RoboWare"><a href="#RoboWare" class="headerlink" title="RoboWare"></a>RoboWare</h4><p><a href="https://github.com/TonyRobotics/RoboWare/tree/master/Studio" target="_blank" rel="noopener">https://github.com/TonyRobotics/RoboWare/tree/master/Studio</a></p><h4 id="修改grub主题"><a href="#修改grub主题" class="headerlink" title="修改grub主题"></a>修改grub主题</h4><p><a href="https://blog.csdn.net/w84963568/article/details/78884003" target="_blank" rel="noopener">https://blog.csdn.net/w84963568/article/details/78884003</a></p><h4 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h4><p>字体<a href="https://www.cnblogs.com/Dylansuns/p/7648002.html" target="_blank" rel="noopener">参考</a>，还有time和simhei</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/fonts/winfonts</span><br><span class="line">cp ~/msyh.ttf ./</span><br><span class="line">sudo chmod 644 *</span><br><span class="line">sudo mkfontscale <span class="comment">#创建雅黑字体的fonts.scale文件，它用来控制字体旋转缩放</span></span><br><span class="line">sudo mkfontdir <span class="comment">#创建雅黑字体的fonts.dir文件，它用来控制字体粗斜体产生</span></span><br><span class="line">sudo <span class="built_in">fc</span>-cache -fv <span class="comment">#建立字体缓存信息，也就是让系统认识雅黑</span></span><br></pre></td></tr></table></figure><h4 id="终端分屏"><a href="#终端分屏" class="headerlink" title="终端分屏"></a>终端分屏</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install terminator</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+Shift+E    垂直分割窗口</span><br><span class="line">Ctrl+Shift+O    水平分割窗口</span><br><span class="line">    F11         全屏</span><br><span class="line">Ctrl+Shift+C    复制</span><br><span class="line">Ctrl+Shift+V    粘贴</span><br><span class="line">Ctrl+Shift+N    或者 Ctrl+Tab 在分割的各窗口之间切换</span><br><span class="line">Ctrl+Shift+X    将分割的某一个窗口放大至全屏使用</span><br><span class="line">Ctrl+Shift+Z    从放大至全屏的某一窗口回到多窗格界面</span><br></pre></td></tr></table></figure><h4 id="双系统蓝牙鼠标"><a href="#双系统蓝牙鼠标" class="headerlink" title="双系统蓝牙鼠标"></a>双系统蓝牙鼠标</h4><p><a href="https://www.jianshu.com/p/56f6b0dc231e" target="_blank" rel="noopener">https://www.jianshu.com/p/56f6b0dc231e</a></p><h4 id="批量修改文件夹-文件权限"><a href="#批量修改文件夹-文件权限" class="headerlink" title="批量修改文件夹/文件权限"></a>批量修改文件夹/文件权限</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当前目录下及递归</span></span><br><span class="line">find -<span class="built_in">type</span> d|xargs chmod 755</span><br><span class="line">find -<span class="built_in">type</span> f|xargs chmod 664</span><br></pre></td></tr></table></figure><h4 id="源码安装cmake"><a href="#源码安装cmake" class="headerlink" title="源码安装cmake"></a>源码安装cmake</h4><p><a href="https://cmake.org/download/" target="_blank" rel="noopener">下载</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编译安装，不要卸载原来的</span></span><br><span class="line">tar -xzvf cmake-3.14.5.tar.gz</span><br><span class="line"><span class="built_in">cd</span> cmake-3.14.5</span><br><span class="line">./bootstrap</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h4 id="安装rtk8811cu驱动"><a href="#安装rtk8811cu驱动" class="headerlink" title="安装rtk8811cu驱动"></a>安装rtk8811cu驱动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/whitebatman2/rtl8821CU</span><br><span class="line"><span class="built_in">cd</span> rtl8821CU</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo modprobe 8821cu</span><br></pre></td></tr></table></figure><h4 id="修改ROS源"><a href="#修改ROS源" class="headerlink" title="修改ROS源"></a>修改ROS源</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">'echo "deb http://mirrors.ustc.edu.cn/ros/ubuntu/ $(lsb_release -sc) main" &gt; /etc/apt/sources.list.d/ros-latest.list'</span></span><br><span class="line">wget https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -O - | sudo apt-key add -</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>github使用</title>
      <link href="/2020/03/06/GitHub/"/>
      <url>/2020/03/06/GitHub/</url>
      
        <content type="html"><![CDATA[<h3 id="1-注册和创建储存库"><a href="#1-注册和创建储存库" class="headerlink" title="1. 注册和创建储存库"></a>1. 注册和创建储存库</h3><p><a href="https://www.jianshu.com/p/68b9e463333f" target="_blank" rel="noopener">教程</a></p><p>创建的存储库地址为：<a href="https://github.com/liuly123/ORB-SLAM2。下面以此为背景" target="_blank" rel="noopener">https://github.com/liuly123/ORB-SLAM2。下面以此为背景</a></p><h3 id="2-Ubuntu"><a href="#2-Ubuntu" class="headerlink" title="2. Ubuntu"></a>2. Ubuntu</h3><h4 id="2-1-初始化"><a href="#2-1-初始化" class="headerlink" title="2.1 初始化"></a>2.1 初始化</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置用户名和邮箱</span></span><br><span class="line">git config --global user.name <span class="string">"liuly123"</span></span><br><span class="line">git config --global user.email <span class="string">"2240057686@qq.com"</span></span><br><span class="line"><span class="comment">#生成key</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"2240057686@qq.com"</span></span><br><span class="line"><span class="comment">#复制生成的ssh key</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment">#粘贴到网站上：登录github-&gt; Your profile -&gt; 右边Edit profile -&gt; SSH and GPG Keys-&gt; New SSH key添加</span></span><br></pre></td></tr></table></figure><h4 id="2-2-新建一个本地仓库"><a href="#2-2-新建一个本地仓库" class="headerlink" title="2.2 新建一个本地仓库"></a>2.2 新建一个本地仓库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ORB-SLAM2</span><br><span class="line"><span class="comment">#初始化</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment">#添加github的地址，使用ssh方式可以避免每次输入密码（打开repository-&gt;clone or download -&gt; Use SSH -&gt; 复制地址）</span></span><br><span class="line">git  remote add origin git@github.com:liuly123/ORB-SLAM2.git</span><br><span class="line"><span class="comment">#同步本地文件（commit）</span></span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">'本次commit的说明'</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><strong>以后每次提交更改</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ORB-SLAM2</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">'本次commit的说明'</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h3 id="2-3其他说明"><a href="#2-3其他说明" class="headerlink" title="2.3其他说明"></a>2.3其他说明</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看同步状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment">#强制同步（会覆盖之前的所有版本），第一次一般需要</span></span><br><span class="line">git push -u origin +master</span><br><span class="line"><span class="comment">#注意：无法上传超过100M的文件</span></span><br><span class="line"><span class="comment">#同步大文件出错的解决办法：</span></span><br><span class="line"><span class="comment">#查看commit id</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"><span class="comment">#回退到之前版本（本地文件也会别修改、删除）</span></span><br><span class="line">git reset --hard 9ff7cad52bce71a0fb7a57928e1673f1a4f536f1</span><br><span class="line"><span class="comment">#本地与远程保持同步</span></span><br><span class="line">git pull origin master</span><br><span class="line"><span class="comment">#抓取远程仓库</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:liuly123/Note.git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
